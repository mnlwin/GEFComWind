sks
kdlssl 2929 s
plot (000s  s)
cat("\014")
rm(list=ls())
#  Load Packages  -------------------------------------------------------------
require(gbm)
require(parcor)
require(rgl)
require(gtools)
require(e1071)
require(randomForest)
require(dlm)
require(foreach)
require(doMC)
require(smoothmest)
require(ggplot2)
#  System Parameters  ---------------------------------------------------------
task = 7                    # Task Week
prevTrain.length = 10200   # number of rows in the training data for last week
#  Change the Directory and Source --------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/Week", task, "/Week", task, "_data", sep = '')
fn.dir = paste(prefix, '/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/fns', sep = '')
setwd(fn.dir)
for (f in list.files(pattern = "*.R")) {
source(f)
}
setwd(working.dir)
rm(prefix, working.dir, fn.dir, f)
#  Load Raw Data  -------------------------------------------------------------
rawData = LoadRaw(task)
train.raw = rawData$train.raw
test.raw = rawData$test.raw
prevTrain.raw = rawData$prevTrain.raw
prevScoring.raw = rawData$prevScoring.raw
rm(rawData)
#  Section 1 - Feature Engineering  -------------------------------------------
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
#remove outliers
#remove outliers
rows.outliers = OutlierRows(trainY, trainX.local)
for (i in 1:10){
trainX.local[[i]] = trainX.local[[i]][-rows.outliers[[i]],]
trainY[[i]]$TARGETVAR = trainY[[i]]$TARGETVAR[-rows.outliers[[i]]]
}
rows.outliers = OutlierRows(trainY, trainX.local)
any = c(1, 2, 3)
c
any
lag(any)
any = 1:10
any
lag(any)
help(lag)
lag(any,1)
lag(t(any)
)
any = vector(any)
any
tsp(any)
hasTsp(any)
as.ts(any)
any
any = as.ts(any)
any
lag(any)
lag(any,1)
lag(any,2)
this = lag(any,2)
this
plot(this)
install.packages(DataCombine)
install.packages('DataCombine')
require(DataCombine)
slide(any,1)
slide(any,any, 1)
any
any = as.data.frame(any)
View(any)
slide(any,x, 1)
View(any)
slide(any,'x', 1)
slide(any,'x', -1)
View(any)
any = 1:10
any = as.data.frame(any)
slide(any,'x', -1)
View(any)
slide(any,any, -1)
slide(any,'any', -1)
DataSlid1 <- slide(Data1, Var = "A", slideBy = -1)
DataSlid1 <- slide(any, Var = "any", slideBy = -1)
View(DataSlid1)
trainX = vector('list', 10)
testX = vector('list', 10)
all.features = vector('list', 10)
i=1
trainX[[i]] = train.raw[[i]][,c('time','month')]    #initialize with time/month columns
trainX[[i]] = rbind(trainX[[i]], test.raw[[i]][, c('time','month')])  #smooth train and test together
dataA = train.raw[[i]]
dataB = test.raw[[i]]
data.smooth = rbind(dataA[,c("U10","V10","U100","V100")], dataB[,c("U10","V10","U100","V100")] )
data.smooth = data.frame(SmoothKM(data.smooth, 1))
names(data.smooth) = c("U10","V10","U100","V100")
### Training data ###
data.smooth$Amp10 = as.numeric(sqrt((data.smooth[,1])^2+(data.smooth[,2])^2))
data.smooth$Amp100 = as.numeric(sqrt((data.smooth[,3])^2+(data.smooth[,4])^2))
data.smooth$Ampratio = data.smooth$Amp100/data.smooth$Amp10
data.smooth$logistic = 1/(1+exp(-(data.smooth$Amp100 - 7)))
data.smooth$lag1 = slide(Data1, Var = "Amp100", slideBy = -1)
data.smooth$lag1 = slide(data.smooth, Var = "Amp100", slideBy = -1)
View(data.smooth)
data.smooth$lag1 <- slide(data.smooth, Var = "Amp100", slideBy = -1)
View(data.smooth)
rm(data.smooth)
data.smooth = rbind(dataA[,c("U10","V10","U100","V100")], dataB[,c("U10","V10","U100","V100")] )
data.smooth = data.frame(SmoothKM(data.smooth, 1))
names(data.smooth) = c("U10","V10","U100","V100")
### Training data ###
data.smooth$Amp10 = as.numeric(sqrt((data.smooth[,1])^2+(data.smooth[,2])^2))
data.smooth$Amp100 = as.numeric(sqrt((data.smooth[,3])^2+(data.smooth[,4])^2))
data.smooth$Ampratio = data.smooth$Amp100/data.smooth$Amp10
data.smooth$logistic = 1/(1+exp(-(data.smooth$Amp100 - 7)))
any = slide(data.smooth, Var = "Amp100", slideBy = -1)
View(any)
data.smooth$logistic = 1/(1+exp(-(data.smooth$Amp100 - 7)))
#data$logistic = 1/(1+exp(-(data$Amp100 - 8)/2))  #adjusted logistic
data.smooth = slide(data.smooth, Var = "Amp100", slideBy = -1)
View(data.smooth)
data.smooth = slide(data.smooth, Var = "Amp100", slideBy = -2)
View(data.smooth)
View(data.smooth)
View(data.smooth)
cat("\014")
rm(list=ls())
#  Load Packages  -------------------------------------------------------------
require(gbm)
require(parcor)
require(rgl)
require(gtools)
require(e1071)
require(randomForest)
require(dlm)
require(foreach)
require(doMC)
require(smoothmest)
require(ggplot2)
require(DataCombine)
#  System Parameters  ---------------------------------------------------------
task = 7                    # Task Week
prevTrain.length = 10200   # number of rows in the training data for last week
#  Change the Directory and Source --------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/Week", task, "/Week", task, "_data", sep = '')
fn.dir = paste(prefix, '/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/fns', sep = '')
setwd(fn.dir)
for (f in list.files(pattern = "*.R")) {
source(f)
}
setwd(working.dir)
rm(prefix, working.dir, fn.dir, f)
#  Load Raw Data  -------------------------------------------------------------
rawData = LoadRaw(task)
train.raw = rawData$train.raw
test.raw = rawData$test.raw
prevTrain.raw = rawData$prevTrain.raw
prevScoring.raw = rawData$prevScoring.raw
rm(rawData)
#  Section 1 - Feature Engineering  -------------------------------------------
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
writeLines('dog',3)
writeLines('dog','dog')
paste('dog',1)
writeLines(paste('Input Option', input.opt, 'chosen: variables consist of smoothed variables, plus month and two engineered variables (65 variables)')
writeLines(paste('Input Option', input.opt, 'chosen: variables consist of smoothed variables,
writeLines(paste('Input Option', input.opt, 'chosen: variables consist of smoothed variables,
plus month and two engineered variables (65 variables)'))
#  Section 1 - Feature Engineering  -------------------------------------------
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
source('~/Google Drive/Research/Projects/GEFCom2014/Wind/fns/FeatureEng2.R')
#  Section 1 - Feature Engineering  -------------------------------------------
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
source('~/Google Drive/Research/Projects/GEFCom2014/Wind/fns/FeatureEng2.R')
#  Section 1 - Feature Engineering  -------------------------------------------
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
#  plot and view smoothed data
plot(prevScoring.raw[[1]]$U100)
lines(testX.local[[1]]$U100, col='red')
plot(prevTrain.raw[[1]]$U100)
lines(trainX.local[[1]]$U100, col='red')
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$TrainX[[1]]              # data frame of all Training x's
testX = input.data$TestX[[1]]                # data frame of all Test/Scoring x's
trainX.local = input.data$TrainX.local       # local x's
testX.local = input.data$TestX.local
trainY = input.data$TrainY
testY = input.data$TestY
rm(input.data, input.opt)
input.opt = 1
input.data = FeatureEng2(prevTrain.raw, prevScoring.raw, input.opt)           #THIS IS THE STRUCTURE OF TRAINING DATA
trainX = input.data$trainX             # data frame of all Training x's
testX = input.data$testX                # data frame of all Test/Scoring x's
getwd()
# Project: WindUpdated
# Author: Min Lwin
# Maintainer: Who to complain to <m.lwin@utexas.edu>
# This is the main file for the project
# It should do very little except call the other files
cat("\014")
rm(list=ls())
#  Set the working directory  -------------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research
/Projects/GEFCom2014/WindUpdated", sep = '')
setwd(working.dir)
rm(working.dir, prefix)
#  Set any global variables here  ---------------------------------------------
task = 7                    # Task Week
prevTrain.length = 10200   # number of rows in the training data for last week
#  Run the code  --------------------------------------------------------------
source("code/load.R")
source("code/clean.R")
source("code/func.R")
source("code/do.R")
working.dir = paste(prefix, "/Users/Min/Google Drive/Research
/Projects/GEFCom2014/WindUpdated", sep = '')
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research
/Projects/GEFCom2014/WindUpdated", sep = '')
# Project: WindUpdated
# Author: Min Lwin
# Maintainer: Who to complain to <m.lwin@utexas.edu>
# This is the main file for the project
# It should do very little except call the other files
cat("\014")
rm(list=ls())
#  Set the working directory  -------------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research
/Projects/GEFCom2014/WindUpdated", sep = '')
setwd(working.dir)
rm(working.dir, prefix)
#  Set any global variables here  ---------------------------------------------
task = 7                    # Task Week
prevTrain.length = 10200   # number of rows in the training data for last week
cat("\014")
rm(list=ls())
cat("\014")
rm(list=ls())
# Project: WindUpdated
# Author: Min Lwin
# Maintainer: Who to complain to <m.lwin@utexas.edu>
# This is the main file for the project
# It should do very little except call the other files
rm(list=ls())
cat("\014")
#  Set the working directory  -------------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research
/Projects/GEFCom2014/WindUpdated", sep = '')
setwd(working.dir)
rm(working.dir, prefix)
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/GEFCom2014/WindUpdated", sep = '')
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/GEFCom2014/WindUpdated", sep = '')
setwd(working.dir)
rm(working.dir, prefix)
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/
Projects/GEFCom2014/WindUpdated", sep = '')
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/
Projects/GEFCom2014/WindUpdated", sep = '')
working.dir
cat("\014")
rm(list=ls())
#  Load Packages  -------------------------------------------------------------
require(gbm)
require(parcor)
require(rgl)
require(gtools)
require(e1071)
require(randomForest)
require(dlm)
require(foreach)
require(doMC)
require(smoothmest)
require(ggplot2)
require(DataCombine)
#  System Parameters  ---------------------------------------------------------
task = 7                    # Task Week
prevTrain.length = 10200   # number of rows in the training data for last week
#  Change the Directory and Source --------------------------------------------
if (.Platform$OS.type == 'windows'){
prefix = "C:"
} else {
prefix =  ""
}
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/Week", task, "/Week", task, "_data", sep = '')
fn.dir = paste(prefix, '/Users/Min/Google Drive/Research/Projects/GEFCom2014/Wind/fns', sep = '')
setwd(fn.dir)
for (f in list.files(pattern = "*.R")) {
source(f)
}
setwd(working.dir)
rm(prefix, working.dir, fn.dir, f)
#  Load Raw Data  -------------------------------------------------------------
rawData = LoadRaw(task)
train.raw = rawData$train.raw
test.raw = rawData$test.raw
prevTrain.raw = rawData$prevTrain.raw
prevScoring.raw = rawData$prevScoring.raw
rm(rawData)
