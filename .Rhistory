source('C:/Users/Min Lwin/Google Drive/Research/Projects/MISC/GEFCom2014/WindUpdated/main.R')
# Project: WindUpdated
# Author: Min Lwin
# Maintainer: Who to complain to <m.lwin@utexas.edu>
#  Description  ---------------------------------------------------------------
# This is the main file for the project
# It should do very little except call the other files
# Code outline:
#   load/loadPrev
#     load raw data
#   clean
#     combine train and test X into one data frame
#     calculate features - all 10 farms
#     select features based on choice
#     split train and test
#     remove outliers from train - each farm
#     save train and test
#   doCV
#     train models
#     predict on cv
#     report cv rmse
#     save emp error quantiles
#   doPrevScore
#     train models
#     predict on prev test
#     report pinball loss
#   doSubmit
#     train models
#     predict on test
#     calculate quantiles
#     save output
#  Set the working directory  -------------------------------------------------
rm(list=ls())
cat("\014")
if (.Platform$OS.type == 'windows'){
prefix = "C:"
working.dir = paste(prefix, "/Users/Min Lwin/Google Drive/Research/Projects/MISC/GEFCom2014/WindUpdated", sep = '')
fn.dir = paste(prefix, '/Users/Min Lwin/Google Drive/Research/Projects/MISC/GEFCom2014/Wind/fns', sep = '')
} else {
prefix =  ""
working.dir = paste(prefix, "/Users/Min/Google Drive/Research/Projects/MISC/GEFCom2014/WindUpdated", sep = '')
fn.dir = paste(prefix, '/Users/Min/Google Drive/Research/Projects/MISC/GEFCom2014/Wind/fns', sep = '')
}
setwd(fn.dir)
for (f in list.files(pattern = "*.R")) {
source(f)
}
setwd(working.dir)
rm(prefix, working.dir, fn.dir, f)
#  Set any global variables here  ---------------------------------------------
task = 7                    # Task Week
prevTrain.length = 15336     # number of rows in the training data for last week
#  Run the code  --------------------------------------------------------------
source("code/func.R")
source("code/load.R")
#source("code/loadPrev.R")
source("code/clean.R")
RunGBM <- function(trainX, target.train, nTreesGBM, train.fraction.gbm, tuneGBM){
writeLines('Training GBM...')
myfit.gbm =
gbm(target.train ~ .,                   # formula
data = trainX,                      # dataset
var.monotone = NULL,
distribution = "gaussian",          # see the help for other choices
n.trees = nTreesGBM,                # number of trees
shrinkage = 0.01,                   # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth = 3,              # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,                 # subsampling fraction, 0.5 is probably best
train.fraction = train.fraction.gbm,# fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,                # minimum total weight needed in each node
cv.folds = 5,                       # do 5-fold cross-validation
keep.data = TRUE,                   # keep a copy of the dataset with the object
verbose = FALSE,                    # don't print out progress
n.cores = 1)                        # use only a single core
writeLines('GBM training complete!')
best.iter = gbm.perf(myfit.gbm, method = tuneGBM, plot.it = T)
output = list('myfit.gbm' = myfit.gbm, 'best.iter' = best.iter)
return(output)
}
